# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Setup Java'
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: 'Check Java Version'
        run: |
          java --version
      - name: 'Assemble JAR'
        run: |
          mvn clean package
      - name: ls
        run: ls
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.0
        with:
          # Artifact name
          name: SP-Backend.jar # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: Backend/target/*jar-with-dependencies.jar
      - name: 'Write Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
      
      - name: 'Check Existing Instance'
        run: |
          echo "::set-env name=INSTANCE_OCID::$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-name cicd-demo \
            --query "data [0].id" \
            --raw-output \
          )"
      - name: 'Create Instance'
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "::set-env name=INSTANCE_OCID::$( \
            oci compute instance launch \
              --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
              --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
              --shape ${{secrets.VM_SHAPE}} \
              --assign-public-ip true \
              --display-name cicd-demo \
              --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
              --ssh-authorized-keys-file /home/runner/.oci/id_vm.pub \
              --subnet-id ${{secrets.VM_SUBNET_OCID}} \
              --wait-for-state RUNNING \
              --query "data.id" \
              --raw-output \
          )"
      - name: 'Get Instance IP'
        run: |
          echo "::set-env name=INSTANCE_IP::$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
          )"
      - name: 'Wait for SSH'
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
                  sleep 5
                  echo "SSH not available..."
          done; echo "SSH ready!"
      - name: 'Stop App'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            pid=`ps aux | grep "[c]icd-demo.jar" | awk '{print $2}'`
            if [ "$pid" == "" ]; then
              echo "Process not found"
            else
              kill -9 $pid
            fi
            sudo mkdir -p /app
      - name: 'Push JAR'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "Backend/target/SP-Backend-1.0-SNAPSHOT-jar-with-dependencies.jar"
          target: "app"
          strip_components: 2
      - name: 'Start App'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            sudo mv ~/app/SP-Backend-1.0-SNAPSHOT-jar-with-dependencies.jar /app/SP-Backend.jar
            nohup java -jar /app/SP-Backend.jar > output.$(date --iso).log 2>&1 &
